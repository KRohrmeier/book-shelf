- remember to STOP and START your server after making changes
  (did you try turning it off and on again?)

- for reasons known only to computers, sometimes you didn't do anything wrong and old
  info just got stuck. You'll need to stop the server and the app, walk away, then come 
  back and start it all up again at which point it will work. Because.

- No, I still don't know how to connect json backend so that I can modify the json from 
  the app. I can read the json in. But appending to a json file doesn't work like appending 
  to a text file.

- ^^ json-server is how you do that! F-yeah! 
  Well, for demoing, anyway.
  found via: https://www.digitalocean.com/community/tutorials/how-to-call-web-apis-with-the-useeffect-hook-in-react
  npm info: https://www.npmjs.com/package/json-server
  Egghead.io tutorial: https://egghead.io/lessons/javascript-creating-demo-apis-with-json-server

- add json-server to dev dependencies
  - create a db.json file in root folder
  - can use curl commands to POST, like: curl -d '{"item":"rice"}' -H 'Content-Type: application/json' -X POST http://localhost:3333/list
  - 

- keyword "return" comes before "fetch" (and not in the "then"s):
  export function getBookList() {
    return fetch('http://localhost:3333/list')
      .then(data => data.json())
}

FETCH

https://www.digitalocean.com/community/tutorials/js-fetch-api

response.json() for JSON responses
response.text() for XML responses
** NOTE: Calling json() returns a promise!

- Fetch API: if the request properly hits the endpoint and comes back, no error will be thrown. 
  This means that error handling is not as simple as chaining a catch call at then end of your 
  fetch promise chain.
  the response object from a fetch call has an ok property that will be either true of false 
  depending on the success of the request. You can then use Promise.reject() if ok is false:

  fetch('https://jsonplaceholder.typicode.com/postsZZZ', options)
  .then(res => {
    if (res.ok) {
      return res.json();
    } else {
      return Promise.reject({ status: res.status, statusText: res.statusText });
    }
  })
  .then(res => console.log(res))
  .catch(err => console.log('Error, with message:', err.statusText));

